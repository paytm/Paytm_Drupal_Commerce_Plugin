<?php
#include('encdec_paytm.php');
include('library/paytm/PaytmChecksum.php');
include('library/paytm/PaytmHelper.php'); 
/**
 * @file
 * Administration forms form payment method
 */
function paytm_settings_form($settings = NULL) {
  $form = array();
  $settings = (array) $settings + array(
    'merchantIdentifier' => '',
    'secret_key' => '',
	//'gateway_url' => '',
	'industry_type' => '',
	'channel_id' => '',
	'website' => '',
  // 'mode' => '',
  'transaction_url' => '',
	'transaction_status_url' => '',
	'callback_mode' => '',
  );
  $form['merchantIdentifier'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant id'),
    '#default_value' => $settings['merchantIdentifier'],
  );
   $form['secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Key'),
    '#default_value' => $settings['secret_key'],
  );
  /*$form['gateway_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Gateway URL'),
    '#default_value' => $settings['gateway_url'],
  );*/
   $form['industry_type'] = array(
    '#type' => 'textfield',
    '#title' => t('Industry Type'),
    '#default_value' => $settings['industry_type'],
  );
   $form['channel_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Channel ID'),
    '#default_value' => $settings['channel_id'],
  );
   $form['website'] = array(
    '#type' => 'textfield',
    '#title' => t('Web Site Name'),
    '#default_value' => $settings['website'],
  );
  $form['transaction_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction URL'),
    '#default_value' => $settings['transaction_url'],
  );
  $form['transaction_status_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction Status URL'),
    '#default_value' => $settings['transaction_status_url'],
  );
  /*$form['mode'] = array(
    '#title' => t('Mode of transaction'),
    '#default_value' => $settings['mode'],
	'#type' => 'select',	
	'#options' => array(t('Test'), t('Live')),
  );*/
  $form['callback_mode'] = array(
	'#title' => t('Enable Callback URL'),
	'#type' => 'select',	
	'#default_value' => $settings['callback_mode'],
	'#options' => array(t('--- SELECT ---'), t('Yes'), t('No')),
  );

  $form['mode'] = array(
  '#title' => t('Select Mode'),
  '#type' => 'select',  
  '#default_value' => $settings['mode'],
  '#options' => array(t('--- SELECT ---'), t('Staging'), t('Production')),
  );
  return $form;
}
// register payment method
function commerce_paytm_commerce_payment_method_info() {
  $logo = _commerce_paytm_logo();
  $icon = _commerce_paytm_icons();
  $display_title = t(''.$logo.' <br/>!logo', array('!logo' => $icon));
  $payment_methods = array();
  $payment_methods['paytm'] = array(
    'title' => t("Paytm"),
    'display_title' => $display_title,
    'short_title' => 'Paytm',
    'description' => t("Payment method for paytm"),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );
  return $payment_methods;
}


// Ask for paytm redirect form
function paytm_redirect_form($form, &$form_state, $order, $payment_method) {
  $cartUrl = url('cart/', array('absolute' => TRUE));
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  // Get financial info
  if($wrapper->commerce_customer_billing->commerce_customer_address->value()){
    $order_address = $wrapper->commerce_customer_billing->commerce_customer_address->value();
    }

$wrapper1 = entity_metadata_wrapper('field_data_field_phone_number', $order);
//if($wrapper->commerce_customer_billing-> field_phone_number -> value())
//{
$order_address=$wrapper->commerce_customer_billing->commerce_customer_address->value();
//}

  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = (int) ($wrapper->commerce_order_total->amount->value()/100);
  $returnUrl = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  $merchantIdentifier = $payment_method['settings']['merchantIdentifier'];
  //$gateway_url = $payment_method['settings']['gateway_url'];
  $industry_type = $payment_method['settings']['industry_type'];
  $channel_id = $payment_method['settings']['channel_id'];
  $website = $payment_method['settings']['website'];
  $mode = (isset($payment_method['settings']['mode']) && !empty($payment_method['settings']['mode']))?$payment_method['settings']['mode']:1;
  if($mode ==1){
    $mode = 0;
  }else{
    $mode = 1;
  }
  $transaction_url = $payment_method['settings']['transaction_url'];
  $transaction_status_url = $payment_method['settings']['transaction_status_url'];
  $callback_mode = $payment_method['settings']['callback_mode'];
  //$orderId = $order->order_id;
  $orderId = $order->order_id."_".time();
  $buyerEmail = $wrapper->mail->value();
  $txnDate=date('Y-m-d H:i:s');
  $buyerFirstName =$order_address['first_name'];
  $buyerLastName =$order_address['last_name'];
  $buyerAddress = $order_address['thoroughfare'];
  $buyerCity = $order_address['locality'];
  $buyerState = $order_address['administrative_area'];
  $buyerCountry = $order_address['country'];
  $buyerPincode = $order_address['postal_code'];
  //$buyerPhoneNumber = $wrapper->commerce_customer_billing->field_phone_number -> value() ; //add a new field named "phone number" name its machine name as "field_phone_number" at checkout page. 
  $txnType = '1';
  $ptPayOption = '1';
  $currency = 'INR';
	$purpose = '1';
	$productDescription = 'paytm Subscription fee';
	//$product1Description =  '';
	//$product2Description = '';
	//$product3Description = '';
	//$product4Description = '';
	//$ShipToAddress = "";
	//$ShipToCity = "";
	//$ShipToState = "";
	//$ShipToCountry = "";
	//$ShipToPincode = "";
	//$ShipToPhoneNumber = "";
	//$ShipToFirstname = "";
	//$ShipToLastname = "";
 
    $srcUrl = str_replace('MID',$merchantIdentifier, PaytmHelper::getPaytmURL(PaytmConstants::CHECKOUT_JS_URL, $mode));
    
    $apiURL = PaytmHelper::getPaytmURL(PaytmConstants::INITIATE_TRANSACTION_URL,$mode) . '?mid='.$merchantIdentifier.'&orderId='.$orderId;
    $paytmParams = array();
    $paytmParams["body"] = array(
      "requestType"   => "Payment",
      "mid"           => $merchantIdentifier,
      "websiteName"   => $website,
      "orderId"       => $orderId,
      "callbackUrl"   => $returnUrl,
      "txnAmount"     => array(
        "value"     => $amount,
        "currency"  => "INR",
      ),
      "userInfo"      => array(
        "custId"    => $buyerEmail,
      ),
    );
    /*
    * Generate checksum by parameters we have in body
    * Find your Merchant Key in your Paytm Dashboard at https://dashboard.paytm.com/next/apikeys 
    */
    $checksum = PaytmChecksum::generateSignature(json_encode($paytmParams["body"], JSON_UNESCAPED_SLASHES), $payment_method['settings']['secret_key']);

    $paytmParams["head"] = array(
      "signature" => $checksum
    );

    $postData = json_encode($paytmParams, JSON_UNESCAPED_SLASHES);

    $response = PaytmHelper::executecUrl($apiURL, $postData); 
    $token = (isset($response['body']['txnToken']))?$response['body']['txnToken']:"";
    $pluginVersion = PaytmConstants::PLUGIN_VERSION;
    if(!empty($token)){
      echo '<style type="text/css">
          #paytm-pg-spinner {margin: 20% auto 0;width: 70px;text-align: center;z-index: 999999;position: relative;}

          #paytm-pg-spinner > div {width: 10px;height: 10px;background-color: #012b71;border-radius: 100%;display: inline-block;-webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;animation: sk-bouncedelay 1.4s infinite ease-in-out both;}

          #paytm-pg-spinner .bounce1 {-webkit-animation-delay: -0.64s;animation-delay: -0.64s;}

          #paytm-pg-spinner .bounce2 {-webkit-animation-delay: -0.48s;animation-delay: -0.48s;}
          #paytm-pg-spinner .bounce3 {-webkit-animation-delay: -0.32s;animation-delay: -0.32s;}

          #paytm-pg-spinner .bounce4 {-webkit-animation-delay: -0.16s;animation-delay: -0.16s;}
          #paytm-pg-spinner .bounce4, #paytm-pg-spinner .bounce5{background-color: #48baf5;} 
          @-webkit-keyframes sk-bouncedelay {0%, 80%, 100% { -webkit-transform: scale(0) }40% { -webkit-transform: scale(1.0) }}

          @keyframes sk-bouncedelay { 0%, 80%, 100% { -webkit-transform: scale(0);transform: scale(0); } 40% { 
              -webkit-transform: scale(1.0); transform: scale(1.0);}}
          .paytm-overlay{width: 100%;position: fixed;top: 0px;opacity: .4;height: 100%;background: #000;}

          </style>';
      echo '<div id="paytm-pg-spinner" class="paytm-pg-loader"><div class="bounce1"></div><div class="bounce2"></div><div class="bounce3"></div><div class="bounce4"></div><div class="bounce5"></div><div class="paytm-overlay paytm-pg-loader"></div><script type="application/javascript" crossorigin="anonymous" src="'.$srcUrl.'"></script>
            <script>
             function openJsCheckout() {
               var config = {
                          "root": "",
                          "flow": "DEFAULT",
                          "data": {
                              "orderId": "'.$orderId.'",
                              "token": "'.$token.'",
                              "tokenType": "TXN_TOKEN",
                              "amount": "'.$amount.'"
                          },
                          "integration": {
                            "platform": "Drupal",
                            "version": "7|'.$pluginVersion.'"
                          },
                          "merchant": {
                              "redirect": true
                          },
                          "handler": {
                      
                              "notifyMerchant": function (eventName, data) {
                                  
                                 if(eventName == "SESSION_EXPIRED" || eventName == "APP_CLOSED"){
                                    window.location.href = "'.$returnUrl.'";
                                 }
                              }
                          }
                      };
                      if (window.Paytm && window.Paytm.CheckoutJS) {
                          // initialze configuration using init method 
                          window.Paytm.CheckoutJS.init(config).then(function onSuccess() {
                              // after successfully updating configuration, invoke checkoutjs
                              window.Paytm.CheckoutJS.invoke();

                          }).catch(function onError(error) {
                            //  console.log("error => ", error);
                          });
                      }
                      }
                      setTimeout(function(){ openJsCheckout(); }, 3000);
                      </script>
          ';
          exit();
      }else{
       return drupal_set_message(('Thank you for shopping with us.However,the transaction has been declined.'));
        // watchdog('commerce_paytm', $message, NULL, WATCHDOG_ERROR);
        //watchdog('commerce_paytm', 'An invalid or empty order made it to checkout.  Order ID: !order_id', array('!order_id' => $order_id), WATCHDOG_ERROR);
        //commerce_payment_redirect_pane_previous_page($order);
      }
    
  }


/**
 * Implements hook_redirect_form_validate().
 */

// validate payment
function paytm_redirect_form_validate($order, $payment_method) {
  if(count($_POST) <= 0){
    commerce_payment_redirect_pane_previous_page($order);
    return drupal_set_message(t('Transaction cancelled.'), 'error' );
    exit;
  }
  $post_checksum = $_POST['CHECKSUMHASH'];
  unset($_POST['CHECKSUMHASH']);
  $secret_key = $payment_method['settings']['secret_key'];
  $merchant_id = $payment_method['settings']['merchantIdentifier'];
  $mode = (isset($payment_method['settings']['mode']) && !empty($payment_method['settings']['mode']))?$payment_method['settings']['mode']:1;
  if($mode ==1){
    $mode = 0;
  }else{
    $mode = 1;
  }
  $orderId =  $_POST['ORDERID'];
  $responseCode = $_POST['RESPCODE'];
  $isValidChecksum = PaytmChecksum::verifySignature($_POST,$secret_key, $post_checksum);
  if($isValidChecksum == 1){

    if(!empty($_POST['STATUS'])) {
      $reqParams = array(
        "MID"     => $merchant_id,
        "ORDERID"   => $orderId
      );
    $reqParams['CHECKSUMHASH'] = PaytmChecksum::generateSignature($reqParams, $secret_key);
    if($_POST['STATUS'] == 'TXN_SUCCESS' || $_POST['STATUS'] == 'PENDING'){
              /* number of retries untill cURL gets success */
              $retry = 1;
              do{
                $postData = 'JsonData='.urlencode(json_encode($reqParams));
                $resParams = PaytmHelper::executecUrl(PaytmHelper::getPaytmURL(PaytmConstants::ORDER_STATUS_URL, $mode), $postData);
                $retry++;
              } while(!$resParams['STATUS'] && $retry < PaytmConstants::MAX_RETRY_COUNT);
              /* number of retries untill cURL gets success */
              
          }
    }
    if(isset($resParams) && $resParams['STATUS']=='TXN_SUCCESS' && $resParams['TXNAMOUNT']==$_POST['TXNAMOUNT'])
    {
      return drupal_set_message(t('Thank you for shopping with us. Your order has been placed successfully.'));
      commerce_paytm_transaction($order, $payment_method);
      commerce_payment_redirect_pane_next_page($order);
    }
    else
    {
      commerce_payment_redirect_pane_previous_page($order);
      return drupal_set_message(t('It seems some issue in server to server communication. Kindly connect with administrator.'), 'error' );
      // watchdog('commerce_paytm', $message, NULL, WATCHDOG_ERROR);
      watchdog('commerce_paytm', 'An invalid or empty order made it to checkout.  Order ID: !order_id', array('!order_id' => $order_id), WATCHDOG_ERROR);
    }
  }elseif ( $isValidChecksum == 1 && $responseCode != "01" ) {
    return drupal_set_message(('Thank you for shopping with us.However,the transaction has been declined.'));
    commerce_paytm_transaction($order, $payment_method);
    commerce_payment_redirect_pane_previous_page($order);
  } 
 
  else {
    return drupal_set_message(t('Security Error. Illegal access detected. We will store your IP address.'), 'error' );
   // watchdog('commerce_paytm', $message, NULL, WATCHDOG_ERROR);
    watchdog('commerce_paytm', 'An invalid or empty order made it to checkout.  Order ID: !order_id', array('!order_id' => $order_id), WATCHDOG_ERROR);
  }
}

function commerce_paytm_transaction($order, $payment_method) {
// ask results from verify function
 /* if(_commerce_paytm_verify($payment_method) == 'false') {
    return;
  }; */
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $amount;
  $transaction->currency_code = $currency;
  $transaction->remote_status = t('Success');
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = t('Payment received at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
  commerce_payment_transaction_save($transaction);
}


// helper functions.. 
function _commerce_paytm_verify($payment_method) {
  $secret_key = $payment_method['settings']['secret_key'];
  $responseCode = $_POST['responseCode'];
  $responseDescription = $_POST['responseDescription'];
  $orderId =  $_POST['orderId'];
  $checksum = $_POST['checksum'];
  $all = getAllParams();
  return verifyChecksum($checksum, $all, $secret_key);
}



	function sanitizedURL($param) {
		$pattern[0] = "%,%";
	        $pattern[1] = "%\(%";
       		$pattern[2] = "%\)%";
	        $pattern[3] = "%\{%";
	        $pattern[4] = "%\}%";
	        $pattern[5] = "%<%";
	        $pattern[6] = "%>%";
	        $pattern[7] = "%`%";
	        $pattern[8] = "%!%";
	        $pattern[9] = "%\\$%";
	        $pattern[10] = "%\%%";
	        $pattern[11] = "%\^%";
	        $pattern[12] = "%\+%";
	        $pattern[13] = "%\|%";
	        $pattern[14] = "%\\\%";
	        $pattern[15] = "%'%";
	        $pattern[16] = "%\"%";
	        $pattern[17] = "%;%";
	        $pattern[18] = "%~%";
	        $pattern[19] = "%\[%";
	        $pattern[20] = "%\]%";
	        $pattern[21] = "%\*%";
        	$sanitizedParam = preg_replace($pattern, "", $param);
		return $sanitizedParam;
	}

function calculateChecksum($secret_key, $all) {
		$hash = hash_hmac('sha256', $all , $secret_key);
		$checksum = $hash;
		return $checksum;
	}

	function getAllParams() {
		//ksort($_POST);
		$all = '';
		foreach($_POST as $key => $value)	{
			if($key != 'checksum') {
				$all .= "'";
				if ($key == 'returnUrl') {
					$all .= sanitizedURL($value);
				} else {
					$all .= sanitizedParam($value);
				}
				$all .= "'";
			}
		}
		return $all;
	}
	
		function verifyChecksum($checksum, $all, $secret) {
		$cal_checksum = calculateChecksum($secret, $all);
		$bool = false;
		if($checksum == $cal_checksum)	{
			$bool = true;
		}
		
		return $bool;
	}

  /**
   * Returns Paytm icon image location.
   */
  function _commerce_paytm_logo() {
    $variable = array(
      'path' => drupal_get_path('module', 'commerce_paytm') . '/images/' . 'paytm_logo.png',
      'title' => 'Paytm',
      'alt' => 'Paytm',
      'attributes' => array(
        'class' => array('commerce-paytm-icon'),
      ),
    );
    return theme('image', $variable);
  }

  function _commerce_paytm_icons() {
    $variable = array(
      'path' => drupal_get_path('module', 'commerce_paytm') . '/images/' . 'paytm_detail.png',
      'title' => 'Paytm',
      'alt' => 'Paytm',
      'attributes' => array(
        'class' => array('commerce-paytm-icon'),
      ),
    );
    return theme('image', $variable);
  }
  
?>
